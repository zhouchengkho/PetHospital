<!DOCTYPE html>
<html lang="en">
<head>
    <title>three.js canvas - panorama demo</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <style>
        html, body {
            height: 100%;
        }

        body {
            background-color: #111f33;
            margin: 0;
            font-family: Helvetica, sans-serif;;
            overflow: hidden;
        }

        a {
            color: #333333;
        }

        #menu {
            position: absolute;
            bottom: 20px;
            width: 100%;
            text-align: center;
        }

        .element {
            width: 400px;
            height: 300px;
            box-shadow: 0px 0px 12px #ffc300;
            border: 1px solid #ffc300;
            text-align: center;
            cursor: default;
        }

        .element:hover {
            box-shadow: 0px 0px 30px #bfff00;
            border: 1px solid #bfff00;
        }

        .element .number {
            position: absolute;
            top: 20px;
            right: 20px;
            font-size: 12px;
            color: #ffc300;
        }

        .element .symbol {
            position: absolute;
            top: 40px;
            left: 0px;
            right: 0px;
            font-size: 60px;
            font-weight: bold;
            color: #ffc300;
            text-shadow: 0 0 10px #ffc300;
        }

        .element .details {
            position: absolute;
            bottom: 15px;
            left: 0px;
            right: 0px;
            font-size: 12px;
            color: #ffc300;
        }

        button {
            color: #ffc300;
            background: transparent;
            outline: 1px solid #ffc300;
            border: 0px;
            padding: 5px 10px;
            cursor: pointer;
        }

        button:hover {
            background-color: #807040;
        }

        button:active {
            color: #000000;
            background-color: #ffc300;
        }
    </style>
</head>
<body>

<div id="container"></div>
<script src="/js/3d/three.js"></script>

<script src="/js/3d/Projector.js"></script>
<script src="/js/3d/CanvasRenderer.js"></script>
<script src="/js/3d/CSS3DRenderer.js"></script>
<div id="menu">
    <button id="table">TABLE</button>
    <button id="sphere">SPHERE</button>
</div>
<script>

    var camera, scene, renderer;

    var texture_placeholder,
            isUserInteracting = false,
            onMouseDownMouseX = 0, onMouseDownMouseY = 0,
            lon = 90, onMouseDownLon = 0,
            lat = 0, onMouseDownLat = 0,
            phi = 0, theta = 0,
            target = new THREE.Vector3();

    init();
    animate();

    function init() {

        var container, mesh;

        container = document.getElementById( 'container' );

        camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 1100 );

        scene = new THREE.Scene();

        texture_placeholder = document.createElement( 'canvas' );
        texture_placeholder.width = 128;
        texture_placeholder.height = 128;

        var context = texture_placeholder.getContext( '2d' );
        context.fillStyle = 'rgb( 200, 200, 200 )';
        context.fillRect( 0, 0, texture_placeholder.width, texture_placeholder.height );

        var materials = [

            loadTexture( '/js/3d/texture/px.jpg' ), // right
            loadTexture( '/js/3d/texture/nx.jpg' ), // left
            loadTexture( '/js/3d/texture/py.jpg' ), // top
            loadTexture( '/js/3d/texture/ny.jpg' ), // bottom
            loadTexture( '/js/3d/texture/pz.jpg' ), // back
            loadTexture( '/js/3d/texture/nz.jpg' )  // front

        ];

        mesh = new THREE.Mesh( new THREE.BoxGeometry( 300, 300, 300, 7, 7, 7 ), new THREE.MultiMaterial( materials ) );
        mesh.scale.x = - 1;
        scene.add( mesh );


        //.....


        //.....




        renderer = new THREE.CanvasRenderer();
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth, window.innerHeight );
        container.appendChild( renderer.domElement );

        document.addEventListener( 'mousedown', onDocumentMouseDown, false );
        document.addEventListener( 'mousemove', onDocumentMouseMove, false );
        document.addEventListener( 'mouseup', onDocumentMouseUp, false );
        //document.addEventListener( 'wheel', onDocumentMouseWheel, false );

        document.addEventListener( 'touchstart', onDocumentTouchStart, false );
        document.addEventListener( 'touchmove', onDocumentTouchMove, false );

        //

        window.addEventListener( 'resize', onWindowResize, false );

    }

    function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

    }

    function loadTexture( path ) {

        var texture = new THREE.Texture( texture_placeholder );
        var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5 } );

        var image = new Image();
        image.onload = function () {

            texture.image = this;
            texture.needsUpdate = true;

        };
        image.src = path;

        return material;

    }

    function onDocumentMouseDown( event ) {
        event.preventDefault();

        isUserInteracting = true;

        onPointerDownPointerX = event.clientX;
        onPointerDownPointerY = event.clientY;


        onPointerDownLon = lon;
        onPointerDownLat = lat;


    }

    function onDocumentMouseMove( event ) {

        if ( isUserInteracting === true ) {

            lon = ( onPointerDownPointerX - event.clientX ) * 0.1 + onPointerDownLon;
            lat = ( event.clientY - onPointerDownPointerY ) * 0.1 + onPointerDownLat;

        }

    }

    function onDocumentMouseUp( event ) {

        isUserInteracting = false;

    }

    function onDocumentMouseWheel( event ) {

        camera.fov += event.deltaY * 0.05;
        camera.updateProjectionMatrix();

    }


    function onDocumentTouchStart( event ) {

        if ( event.touches.length == 1 ) {

            event.preventDefault();

            onPointerDownPointerX = event.touches[ 0 ].pageX;
            onPointerDownPointerY = event.touches[ 0 ].pageY;

            onPointerDownLon = lon;
            onPointerDownLat = lat;

        }

    }

    function onDocumentTouchMove( event ) {

        if ( event.touches.length == 1 ) {

            event.preventDefault();

            lon = ( onPointerDownPointerX - event.touches[0].pageX ) * 0.1 + onPointerDownLon;
            lat = ( event.touches[0].pageY - onPointerDownPointerY ) * 0.1 + onPointerDownLat;

        }

    }

    function animate() {

        requestAnimationFrame( animate );
        update();

    }

    function update() {

        if ( isUserInteracting === false ) {

            lon += 0.01;

        }

        lat = Math.max( - 85, Math.min( 85, lat ) );
        phi = THREE.Math.degToRad( 90 - lat );
        theta = THREE.Math.degToRad( lon );

        target.x = 500 * Math.sin( phi ) * Math.cos( theta );
        target.y = 500 * Math.cos( phi );
        target.z = 500 * Math.sin( phi ) * Math.sin( theta );

        camera.lookAt( target );

        renderer.render( scene, camera );

    }

</script>
</body>
</html>
