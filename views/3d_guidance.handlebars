<!DOCTYPE html>
<html lang="en">
<head>
    <title>three.js canvas - panorama demo</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <style>

        #menu {
            position: absolute;
            bottom: 20px;
            width: 100%;
            text-align: center;
        }

        button {
            color: #ffc300;
            background: transparent;
            outline: 1px solid #ffc300;
            border: 0px;
            padding: 5px 10px;
            cursor: pointer;
        }

        button:hover {
            background-color: #807040;
        }

        button:active {
            color: #000000;
            background-color: #ffc300;
        }
    </style>
</head>
<body>

<div id="container"></div>
<script src="/js/3d/three.js"></script>
<script src="/js/3d/Projector.js"></script>
<script src="/js/3d/CanvasRenderer.js"></script>

<div id="menu">


    <div class="g-left inline" id="room1">
        <a href="./../img/8.jpg" title="这是前台，包括接待挂号、导医咨询、病历档案发出与回收、收费等。">
            <button id="table">前台</button>
        </a>
    </div>
    <div class="g-left inline" id="room2">
        <a href="./../img/9.jpg" title="这是化验室，包括对送检样本的预处理，对相应样本进行血常规、血液生化等检查操作流程。">
            <button id="table">化验室</button>
        </a>
    </div>
</div>

<script>
    $('#room1 a').Chocolat();
    $('#room2 a').Chocolat();

</script>

<script>

    var camera, scene, renderer;

    var texture_placeholder,
            isUserInteracting = false,
            onMouseDownMouseX = 0, onMouseDownMouseY = 0,
            lon = 90, onMouseDownLon = 0,
            lat = 0, onMouseDownLat = 0,
            phi = 0, theta = 0,
            move = 0,
            target = new THREE.Vector3();
    var status = 0

    init();
    animate();

    function init() {

        var container, mesh;

        container = document.getElementById('container');

        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1100);

        scene = new THREE.Scene();

        texture_placeholder = document.createElement('canvas');
        texture_placeholder.width = 128;
        texture_placeholder.height = 128;

        var context = texture_placeholder.getContext('2d');
        context.fillStyle = 'rgb( 200, 200, 200 )';
        context.fillRect(0, 0, texture_placeholder.width, texture_placeholder.height);

        loadMesh('0')

        //.....

        //        var mesh2 = new THREE.Mesh( new THREE.BoxGeometry( 50, 50, 50, 30, 30, 30 ) );
        //mesh2.scale.x = -1;
        //scene.add(mesh2);

        //.....

        renderer = new THREE.CanvasRenderer();
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        container.appendChild(renderer.domElement);

        document.addEventListener('mousedown', onDocumentMouseDown, false);
        document.addEventListener('mousemove', onDocumentMouseMove, false);
        document.addEventListener('mouseup', onDocumentMouseUp, false);
        document.addEventListener('wheel', onDocumentMouseWheel, false);

        document.addEventListener('touchstart', onDocumentTouchStart, false);
        document.addEventListener('touchmove', onDocumentTouchMove, false);
        //

        window.addEventListener('resize', onWindowResize, false);

    }


    function loadMesh(folderName) {
        if (folderName != '') { folderName = folderName + '/' }

        var meshObj = scene.getObjectByName('mesh');
        scene.remove(meshObj);

        var materials = [

            loadTexture( '/js/3d/texture/' + folderName + 'px.jpg' ), // right
            loadTexture( '/js/3d/texture/' + folderName + 'nx.jpg' ), // left
            loadTexture( '/js/3d/texture/' + folderName + 'py.jpg' ), // top
            loadTexture( '/js/3d/texture/' + folderName + 'ny.jpg' ), // bottom
            loadTexture( '/js/3d/texture/' + folderName + 'pz.jpg' ), // back
            loadTexture( '/js/3d/texture/' + folderName + 'nz.jpg' )  // front

        ];

        mesh = new THREE.Mesh( new THREE.BoxGeometry( 300, 300, 300, 30, 30, 30 ), new THREE.MultiMaterial( materials ) );
        mesh.name = 'mesh';
        mesh.scale.x = -1;
        scene.add( mesh );
    }

    function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

    }

    function loadTexture( path ) {

        var texture = new THREE.Texture( texture_placeholder );
        var material = new THREE.MeshBasicMaterial( { map: texture, overdraw: 0.5 } );

        var image = new Image();
        image.onload = function () {

            texture.image = this;
            texture.needsUpdate = true;

        };
        image.src = path;

        return material;

    }


    function onDocumentMouseDown( event ) {
        event.preventDefault();

        isUserInteracting = true;

        onPointerDownPointerX = event.clientX;
        onPointerDownPointerY = event.clientY;


        onPointerDownLon = lon;
        onPointerDownLat = lat;
    }

    function onDocumentMouseMove( event ) {

        event.preventDefault();
        if ( isUserInteracting === true ) {
            lon = ( onPointerDownPointerX - event.clientX ) * 0.1 + onPointerDownLon


        }


    }

    function onDocumentMouseUp(event) {

        event.preventDefault();
        if (onPointerDownLon == lon) {
            var tmp = (event.clientX + move) % 3600;
            var y = event.clientY
            if (status == 0 && tmp < 1600 && tmp > 1200 && y > 450 && y < 650) {

                loadMesh('1')
                status = 1
            }
            else if (status == 1 && tmp > 1150 && tmp < 1550 && y > 450 && y < 650) {
                loadMesh('0')
                status = 0
            }

        }
        else {
          move += (onPointerDownPointerX - event.clientX)
        }
        isUserInteracting = false;
    }

    function onDocumentMouseWheel( event ) {
        event.preventDefault();
    }

    function onDocumentTouchStart( event ) {

        if ( event.touches.length == 1 ) {

            event.preventDefault();

            onPointerDownPointerX = event.touches[ 0 ].pageX;
            onPointerDownPointerY = event.touches[ 0 ].pageY;

            onPointerDownLon = lon;
            onPointerDownLat = lat;
        }

    }

    function onDocumentTouchMove( event ) {

        if ( event.touches.length == 1 ) {

            event.preventDefault();

            lon = ( onPointerDownPointerX - event.touches[0].pageX ) * 0.1 + onPointerDownLon;

        }

    }

    function animate() {

        requestAnimationFrame(animate);
        update();

    }

    function update() {

        if (isUserInteracting === false) {

            lon += 0.05;
            move += 0.5;
        }

        lat = Math.max(-85, Math.min(85, lat));
        phi = THREE.Math.degToRad(90 - lat);
        theta = THREE.Math.degToRad(lon);

        target.x = 500 * Math.sin(phi) * Math.cos(theta);
        target.y = 500 * Math.cos(phi);
        target.z = 500 * Math.sin(phi) * Math.sin(theta);

        camera.lookAt(target);

        renderer.render( scene, camera );

    }

</script>
</body>
</html>
