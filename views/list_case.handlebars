<title>three.js css3d - periodic table</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
<style>
    html, body {
        height: 100%;
    }

    body {
        background-color: #111f33;
        margin: 0;
        font-family: Helvetica, sans-serif;;
        overflow: hidden;
    }

    a {
        color: #333333;
    }

    #menu {
        position: absolute;
        bottom: 20px;
        width: 100%;
        text-align: center;
    }

    .element {
        width: 400px;
        height: 300px;
        box-shadow: 0px 0px 30px #ffc300;
        border: 1px solid #ffc300;
        text-align: center;
        cursor: default;
    }

    .element:hover {
        box-shadow: 0px 0px 30px #bfff00;
        border: 1px solid #bfff00;
    }

    .element .number {
        position: absolute;
        top: 20px;
        right: 20px;
        font-size: 12px;
        color: #ffc300;
    }

    .element .symbol {
        position: absolute;
        top: 40px;
        left: 0px;
        right: 0px;
        font-size: 60px;
        font-weight: bold;
        color: #ffc300;
        text-shadow: 0 0 10px #ffc300;
    }

    .element .details {
        posigtion: absolute;
        bottom: 15px;
        left: 0px;
        right: 0px;
        font-size: 12px;
        color: #ffc300;
    }

    button {
        color: #ffc300;
        background: transparent;
        outline: 1px solid #ffc300;
        border: 0px;
        padding: 5px 10px;
        cursor: pointer;
    }

    button:hover {
        background-color: #807040;
    }

    button:active {
        color: #000000;
        background-color: #ffc300;
    }
</style>
<script src="/js/3d/three.js"></script>
<script src="/js/3d/tween.min.js"></script>
<script src="/js/3d//TrackballControls.js"></script>
<script src="/js/3d/CSS3DRenderer.js"></script>
<script src="/js/spin.js"></script>

<div id="container"></div>
<div id="menu">
    <button id="table">TABLE</button>
    <button id="sphere">SPHERE</button>
    <button id="helix">HELIX</button>
    <button id="grid">GRID</button>
</div>
<script></script>
<script>
    let opts = {
        lines: 13 // The number of lines to draw
        , length: 20 // The length of each line
        , width: 10 // The line thickness
        , radius: 42 // The radius of the inner circle
        , scale: 1 // Scales overall size of the spinner
        , corners: 1 // Corner roundness (0..1)
        , color: '#ffc300' // #rgb or #rrggbb or array of colors
        , opacity: 0.25 // Opacity of the lines
        , rotate: 0 // The rotation offset
        , direction: 1 // 1: clockwise, -1: counterclockwise
        , speed: 1 // Rounds per second
        , trail: 60 // Afterglow percentage
        , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
        , zIndex: 2e9 // The z-index (defaults to 2000000000)
        , className: 'spinner' // The CSS class to assign to the spinner
        , top: '50%' // Top position relative to parent
        , left: '50%' // Left position relative to parent
        , shadow: false // Whether to render a shadow
        , hwaccel: false // Whether to use hardware acceleration
        , position: 'absolute' // Element positioning
    };
    let target = document.getElementById('container');
    let spinner = new Spinner(opts).spin(target);

    var table = [];
    var camera, scene, renderer;
    var controls;

    var objects = [];
    var targets = {table: [], sphere: [], helix: [], grid: []};

    API.list_case('', (err, data) => { //debug
        spinner.stop();
        let y = 0;
        let x = 0;
        for (let i = 0; i < data.length; i++) {
            table.push(data[i].name);
            table.push(data[i].disease_name);
            table.push(data[i]._id);
            if (y == 6) {
                y = 0;
                x++;
            }
            table.push(y++);
            table.push(x);
        }
        init();
        animate();
    });


    function init() {

        camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 5);
        camera.position.x = 100;
        camera.position.z = 3000;
        scene = new THREE.Scene();

        // table

        for (var i = 0; i < table.length; i += 5) {


            var bigbigElement = document.createElement('div');
            bigbigElement.className = 'element';
            bigbigElement.style.backgroundColor = 'rgba(128,128,150,0.5)';

            var bigElement = document.createElement('a');
            bigElement.href = "/case?id=" + table[i + 2];
            bigbigElement.appendChild(bigElement);

            var element = document.createElement('div');
            bigElement.appendChild(element);

            var number = document.createElement('div');
            number.className = 'number';
            number.textContent = (i / 5) + 1;
            element.appendChild(number);

            var symbol = document.createElement('div');
            symbol.className = 'symbol';
            symbol.textContent = table[i];
            element.appendChild(symbol);

            var details = document.createElement('div');
            details.className = 'details';
            details.innerHTML = table[i + 1] + '<br>' + table[i + 2];
            element.appendChild(details);

            var object = new THREE.CSS3DObject(bigbigElement);
            object.position.x = Math.random() * 4000 - 2000;
            object.position.y = Math.random() * 4000 - 2000;
            object.position.z = Math.random() * 4000 - 2000;
            scene.add(object);

            objects.push(object);

            var object = new THREE.Object3D();
            object.position.x = ( table[i + 3] * 450 ) - 1135;
            object.position.y = -( table[i + 4] * 350 ) + 1930;

            targets.table.push(object);

        }

        // sphere

        var vector = new THREE.Vector3();

        var spherical = new THREE.Spherical();

        for (var i = 0, l = objects.length; i < l; i++) {

            var phi = Math.acos(-1 + ( 2 * i ) / l);
            var theta = Math.sqrt(l * Math.PI) * phi;

            var object = new THREE.Object3D();

            spherical.set(800, phi, theta);


            object.position.setFromSpherical(spherical);
            object.position.y += 100;

            vector.copy(object.position).multiplyScalar(2);

            object.lookAt(vector);

            targets.sphere.push(object);

        }

        // helix

        var vector = new THREE.Vector3();
        var cylindrical = new THREE.Cylindrical();

        for (var i = 0, l = objects.length; i < l; i++) {

            var theta = i * 0.175 + Math.PI;
            var y = -( i * 8 ) + 450;

            var object = new THREE.Object3D();

            cylindrical.set(900, theta, y);

            object.position.setFromCylindrical(cylindrical);

            vector.x = object.position.x * 3;
            vector.y = object.position.y;
            vector.z = object.position.z * 2;

            object.lookAt(vector);

            targets.helix.push(object);

        }

        // grid

        for (var i = 0; i < objects.length; i++) {

            var object = new THREE.Object3D();

            object.position.x = ( ( i % 5 ) * 800 ) - 1600;
            object.position.y = ( -( Math.floor(i / 5) % 5 ) * 800 ) + 1600;
            object.position.z = ( Math.floor(i / 25) ) * 1000 - 2000;

            targets.grid.push(object);

        }

        //

        renderer = new THREE.CSS3DRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.domElement.style.position = 'absolute';
        document.getElementById('container').appendChild(renderer.domElement);

        //

        controls = new THREE.TrackballControls(camera, renderer.domElement);
        controls.rotateSpeed = 1;
        controls.minDistance = 500;
        controls.maxDistance = 6000;
        controls.addEventListener('change', render);

        var button = document.getElementById('table');
        button.addEventListener('click', function (event) {

            transform(targets.table, 2000);

        }, false);

        var button = document.getElementById('sphere');
        button.addEventListener('click', function (event) {

            transform(targets.sphere, 2000);

        }, false);

        var button = document.getElementById('helix');
        button.addEventListener('click', function (event) {

            transform(targets.helix, 2000);

        }, false);

        var button = document.getElementById('grid');
        button.addEventListener('click', function (event) {

            transform(targets.grid, 2000);

        }, false);

        transform(targets.table, 2000);

        //

        window.addEventListener('resize', onWindowResize, false);

    }

    function transform(targets, duration) {

        TWEEN.removeAll();

        for (var i = 0; i < objects.length; i++) {

            var object = objects[i];
            var target = targets[i];

            new TWEEN.Tween(object.position)
                    .to({
                        x: target.position.x,
                        y: target.position.y,
                        z: target.position.z
                    }, Math.random() * duration + duration)
                    .easing(TWEEN.Easing.Exponential.InOut)
                    .start();

            new TWEEN.Tween(object.rotation)
                    .to({
                        x: target.rotation.x,
                        y: target.rotation.y,
                        z: target.rotation.z
                    }, Math.random() * duration + duration)
                    .easing(TWEEN.Easing.Exponential.InOut)
                    .start();

        }

        new TWEEN.Tween(this)
                .to({}, duration * 2)
                .onUpdate(render)
                .start();

    }

    function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
        render();

    }

    function animate() {
        requestAnimationFrame(animate);
        TWEEN.update();
        controls.update();

    }

    function render() {
        renderer.render(scene, camera);

    }

</script>
